#=
MIT License

Copyright (c) 2024 Mohannad Shehadeh

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
=#
# Gauss–Jordan elimination to get RREF FOR GF(2)-VALUED MATRICES ONLY
function RREF(M)
    M = copy(M)
    local m = size(M)[1]
    local n = size(M)[2]
    local h = 1
    local k = 1
    while h <= m && k <= n
        pivRow = findnext(M[:,k] .!= false, h)
        if pivRow == nothing
            k += 1            
        else
            swapRows!(M, h, pivRow)
            for i = h + 1 : m
                if M[i,k] == true
                    M[i,:] = M[i,:] .⊻ M[h,:]
                end
            end
            # Remove to get REF instead of RREF
            for i = 1 : h - 1 
                if M[i,k] == true
                    M[i,:] = M[i,:] .⊻ M[h,:]
                end
            end
            h += 1; k += 1
        end
    end
    return M
end;
function swapRows!(M, i, j)
    tempCopy = M[i,:]
    M[i,:] = M[j,:]
    M[j,:] = tempCopy
    return M
end;
# Get generator matrix of DUAL CODE of code generated by G FOR GF(2)-VALUED MATRICES ONLY
function dual(G)
    A = RREF(G)
    local k = size(G)[1]
    local n = size(G)[2]
    info_positions = []
    for i in 1:k
        position = findfirst(x->x!=0, A[i,:])
        if position == nothing
            break
        else
            push!(info_positions, position)
        end
    end
    k = length(info_positions)
    parity_positions = [i for i in 1:n if i ∉ info_positions]
    dual_G = zeros(Int64, n-k, n)
    G_parity_view = view(A[1:k,:],:,parity_positions)
    H_parity_view = view(dual_G,:,parity_positions)
    H_info_view = view(dual_G,:,info_positions)
    copyto!(H_info_view, transpose(G_parity_view))  
    vertical_offset = 0
    for i in parity_positions
        vertical_offset += 1
        dual_G[vertical_offset, i] = 1
    end
    return dual_G
end;